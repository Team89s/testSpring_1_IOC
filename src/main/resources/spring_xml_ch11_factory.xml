<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 方式一：通过配置class为bean的全类名，通过反射创建Car实例 -->
    <bean class="com.igeek.ch11.factory.Car" id="car1"
          p:label="奥迪" p:color="黑色"></bean>


    <!--
        方式二：通过静态工厂，创建Car实例
        1.配置静态工厂的bean
        2.factory-method属性，指定的就是静态工厂中的静态方法
        3.constructor-arg节点，传递方法的形参
    -->
    <bean id="car2" class="com.igeek.ch11.factory.StaticCarFactory"
        factory-method="getCar">
        <constructor-arg value="AAA"></constructor-arg>
    </bean>


    <!--
        方式三：通过实例工厂，创建Car实例
        1.配置实例工厂的bean
        2.配置Car实例，factory-bean指定实例工厂
        3.factory-method指定实例工厂中的实例方法
        4.constructor-arg指定实例工厂方法中的形参
    -->
    <bean id="instanceFactory" class="com.igeek.ch11.factory.InstanceCarFactory"></bean>
    <bean id="car3" factory-bean="instanceFactory" factory-method="getCar">
        <constructor-arg value="222"></constructor-arg>
    </bean>
</beans>